<<<<<<< HEAD
// Simple command-line kernel monitor useful for
// controlling the kernel and exploring the system interactively.

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>

#include <kern/console.h>
#include <kern/monitor.h>
#include <kern/kdebug.h>
#include <kern/trap.h>

#define CMDBUF_SIZE	80	// enough for one VGA text line


struct Command {
	const char *name;
	const char *desc;
	// return -1 to force monitor to exit
	int (*func)(int argc, char** argv, struct Trapframe* tf);
};

static struct Command commands[] = {
	{ "help", "Display this list of commands", mon_help },
	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
};
#define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))

unsigned read_eip();

/***** Implementations of basic kernel monitor commands *****/

int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
	int i;

	for (i = 0; i < NCOMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
	return 0;
}

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
	extern char entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
		(end-entry+1023)/1024);
	return 0;
}

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
	// Your code here.
	return 0;
}



/***** Kernel monitor command interpreter *****/

#define WHITESPACE "\t\r\n "
#define MAXARGS 16

static int
runcmd(char *buf, struct Trapframe *tf)
{
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
			*buf++ = 0;
		if (*buf == 0)
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
	}
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < NCOMMANDS; i++) {
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
	return 0;
}

void
monitor(struct Trapframe *tf)
{
	char *buf;

	cprintf("Welcome to the JOS kernel monitor!\n");
	cprintf("Type 'help' for a list of commands.\n");

	if (tf != NULL)
		print_trapframe(tf);

	while (1) {
		buf = readline("K> ");
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
				break;
	}
}

// return EIP of caller.
// does not work if inlined.
// putting at the end of the file seems to prevent inlining.
unsigned
read_eip()
{
	uint32_t callerpc;
	__asm __volatile("movl 4(%%ebp), %0" : "=r" (callerpc));
	return callerpc;
}
=======
// Simple command-line kernel monitor useful for
// controlling the kernel and exploring the system interactively.

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>

#include <kern/console.h>
#include <kern/monitor.h>
#include <kern/kdebug.h>
#include <kern/pmap.h>
#define CMDBUF_SIZE	80	// enough for one VGA text line


struct Command {
	const char *name;
	const char *desc;
	// return -1 to force monitor to exit
	int (*func)(int argc, char** argv, struct Trapframe* tf);
};

static struct Command commands[] = {
	{ "help", "Display this list of commands", mon_help },
	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
	{ "backtrace", "Display the backtarce of the stack", mon_backtrace},
	{"showmappings","Showmapping of a given virtual address",mon_showmappings},
	{"setmappings","Set, clear, or change the permissions of any mapping in the current address space",mon_setmappings},
	{"dumpvirtual","Dump a range of virtual memory",mon_dumpvirtual},
	{"dumpphysical","Dump a range of physical memory",mon_dumpphysical},
};
#define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))

unsigned read_eip();

/***** Implementations of basic kernel monitor commands *****/

int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
	int i;

	for (i = 0; i < NCOMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
	return 0;
}

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
	extern char entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
		(end-entry+1023)/1024);
	return 0;
}

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
	// Your code here.
	uint32_t ebp,eip,arg[5];
	ebp = read_ebp();
	eip = *((uint32_t*)ebp+1);
	arg[0] = *((uint32_t*)ebp+2);
	arg[1] = *((uint32_t*)ebp+3);
	arg[2] = *((uint32_t*)ebp+4);
	arg[3] = *((uint32_t*)ebp+5);
	arg[4] = *((uint32_t*)ebp+6);

	cprintf("Stack backtrace:\n");
	
	while(ebp != 0x00)
		{
			
			cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n",ebp,eip,arg[0],arg[1],arg[2],arg[3],arg[4]);
			struct Eipdebuginfo info;
			info.eip_file = "<unknown>";
			info.eip_line = 0;
			info.eip_fn_name = "<unknown>";
			info.eip_fn_namelen = 9;
			info.eip_fn_addr = eip;
			info.eip_fn_narg = 0;
			char display_eip_fn_name[30];
			debuginfo_eip(eip,&info);
			int i;
			for ( i=0;(info.eip_fn_name[i]!=':')&&( i<30); i++)
				display_eip_fn_name[i]=info.eip_fn_name[i];
			display_eip_fn_name[i]='\0';
			cprintf("    %s:%d: %s+%d\n",info.eip_file,info.eip_line,display_eip_fn_name,(eip-info.eip_fn_addr));
			ebp = *(uint32_t *)ebp;
			eip = *((uint32_t*)ebp+1);
			arg[0] = *((uint32_t*)ebp+2);
			arg[1] = *((uint32_t*)ebp+3);
			arg[2] = *((uint32_t*)ebp+4);
			arg[3] = *((uint32_t*)ebp+5);
			arg[4] = *((uint32_t*)ebp+6);
			
		}
	return 0;
}

int
mon_showmappings(int argc, char **argv, struct Trapframe *tf)
{
	if(argc!=3)
		{
			cprintf("Need low va and high va in 0x , for exampe:\nshowmappings 0x3000 0x5000\n");
			return 0;
		}
	uintptr_t va_low = strtol(argv[1], 0,16);
	uintptr_t va_high = strtol(argv[2], 0,16);
	uintptr_t va_low_page = PTE_ADDR(va_low);
	uintptr_t va_high_page = PTE_ADDR(va_high);

	int pagenum = (va_high_page-va_low_page)/PGSIZE;
	int i = 0;
	pte_t *pte;
	cprintf("----------output start------------\n");
	cprintf("Virtual Address	    Physical  Permissions(kernel/user)");
	for(i=0;i<pagenum;i++)
	{
		pte = pgdir_walk(kern_pgdir, (void * )(va_low_page+i*PGSIZE), 0);
		cprintf("\n0x%08x - 0x%08x :",va_low_page+i*PGSIZE,va_low_page+(i+1)*PGSIZE);
		if ( pte!=NULL&& (*pte&PTE_P))//pte exist
		{
		cprintf("0x%08x ",PTE_ADDR(*pte));
		if (*pte & PTE_W)
			{
			if (*pte & PTE_U)
				cprintf("RW\\RW");
			else
				cprintf("RW\\--");
			}
		else
			{
			if (*pte & PTE_U)
				cprintf("R-\\R-");
			else
				cprintf("R-\\--");
			}
		}
	}
	cprintf("\n----------output end------------\n");
	return 0;
	
}

int
mon_setmappings(int argc, char **argv, struct Trapframe *tf)
{
	if(argc!=3&&argc!=4)
		{
			cprintf("set, clear, or change the permissions of any mapping in the current address space");
			cprintf("Usage:setmappings <OPER> <VA> (<Permission>)\n OPER:-set,-clear,-change Permission:U,W\n");
			return 0;
		}
	
	uintptr_t va = strtol(argv[2], 0,16);
	uintptr_t va_page = PTE_ADDR(va);
	pte_t *pte;
	pte = pgdir_walk(kern_pgdir, (void * )(va_page), 0);
	if(strcmp(argv[1],"-clear")==0)
	{
		*pte=PTE_ADDR(*pte);
		cprintf("\n0x%08x permissions clear OK",(*pte));
	}
	else if(strcmp(argv[1],"-set")==0||strcmp(argv[1],"-change")==0)
	{
		if(argc!=4)
		{
			*pte=(*pte)&(~PTE_U)&(~PTE_W);
		}
		if (argv[3][0]=='W'||argv[3][0]=='w'||argv[3][1]=='W'||argv[3][1]=='w')
		{
			*pte=(*pte)|PTE_W;
		}
		if (argv[3][0]=='U'||argv[3][0]=='u'||argv[3][1]=='U'||argv[3][1]=='u')
		{
			*pte=(*pte)|PTE_U;
		}
		cprintf("Permission set OK\n");
	}
	return 0;
}

int 
mon_dumpvirtual(int argc, char **argv, struct Trapframe *tf)
{
	if(argc!=3)
		{
			cprintf("Usage:dumpvirtual <address> <size>");
			return 0;
		}
	uintptr_t va=strtol(argv[1], 0,16);
	uintptr_t va_assign = va&(~0xf);
	uint32_t size = strtol(argv[2],0,10);
	uint32_t i =0;
	uint32_t j=0;
	cprintf("VA	     Contents");
	for (i=0;i<size/4;i++)
		{
		cprintf("\n0x%08x :",va_assign+i*16);
		for(j=0;j<4;j++)
			cprintf("0x%08x ",*((uintptr_t *)(va_assign+i*16+4*j)));
		}
	if (size-i*4>0)
		{
		cprintf("\n0x%08x :",va_assign+i*16);
		for (j=0;(i*4+j<size);j++)
			cprintf("0x%08x ",*((uintptr_t *)(va_assign+i*16+4*j)));
		}
	cprintf("\n");
	return 0;
}

int 
mon_dumpphysical(int argc, char **argv, struct Trapframe *tf)
{
	if(argc!=3)
		{
			cprintf("Usage:dumpphysical <address> <size>");
			return 0;
		}
	physaddr_t pa=(strtol(argv[1], 0,16));
	physaddr_t pa_assign = pa&(~0xf);
	uintptr_t va=(uint32_t)KADDR(pa);
	uintptr_t va_assign = va&(~0xf);
	uint32_t size = strtol(argv[2],0,10);
	uint32_t i =0;
	uint32_t j=0;
	cprintf("PA	     Contents");
	for (i=0;i<size/4;i++)
		{
		cprintf("\n0x%08x :",pa_assign+i*16);
		for(j=0;j<4;j++)
			cprintf("0x%08x ",*((uintptr_t *)(va_assign+i*16+4*j)));
		}
	if (size-i*4>0)
		{
		cprintf("\n0x%08x :",pa_assign+i*16);
		for (j=0;(i*4+j<size);j++)
			cprintf("0x%08x ",*((uintptr_t *)(va_assign+i*16+4*j)));
		}
	cprintf("\n");
	return 0;
}
/***** Kernel monitor command interpreter *****/

#define WHITESPACE "\t\r\n "
#define MAXARGS 16

static int
runcmd(char *buf, struct Trapframe *tf)
{
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
			*buf++ = 0;
		if (*buf == 0)
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
	}
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < NCOMMANDS; i++) {
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
	return 0;
}

void
monitor(struct Trapframe *tf)
{
	char *buf;

	cprintf("\033[0;32;40mWelcome to the \033[0;36;41mJOS kernel monitor!\033[0;37;40m\n");
	cprintf("Type 'help' for a list of commands.\n");


	while (1) {
		buf = readline("K> ");
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
				break;
	}
}

// return EIP of caller.
// does not work if inlined.
// putting at the end of the file seems to prevent inlining.
unsigned
read_eip()
{
	uint32_t callerpc;
	__asm __volatile("movl 4(%%ebp), %0" : "=r" (callerpc));
	return callerpc;
}
>>>>>>> lab2
